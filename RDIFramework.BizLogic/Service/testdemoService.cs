#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//     RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//     RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
//	框架官网：http://www.rdiframework.net/
//	框架博客：http://blog.rdiframework.net/
//	交流QQ：406590790 
//	邮件交流：406590790@qq.com
//	其他博客：
//    http://www.cnblogs.com/huyong 
//    http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由RDIFramework.NET平台代码生成工具自动生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System;
using System.Data;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.ServiceModel;

namespace RDIFramework.BizLogic
{
	using RDIFramework.BizLogic;
	using RDIFramework.Utilities;

	/// <summary>
	/// testdemoService
	/// 服务层
	/// 
	/// 修改记录
	/// 
	///	2018-04-18 版本：1.0  建立服务层。
	///		
	/// 版本：1.0
	///
	/// <author>
	///	<name></name>
	///	<date>2018-04-18</date>
	/// </author> 
	/// </summary>
	[ServiceBehavior(IncludeExceptionDetailInFaults = true)]
	public class testdemoService : System.MarshalByRefObject, ItestdemoService
	{
		private string serviceName = "testdemo";
		
		/// <summary>
		/// RDIFramework.NET框架数据库连接
		/// </summary>
		private readonly string RDIFrameworkDbConection = SystemInfo.RDIFrameworkDbConection;

		/// <summary>
		/// 业务数据库连接字符串
		/// </summary>
		private readonly string BusinessDbConnection = SystemInfo.BusinessDbConnection;

		#region public string Add(UserInfo userInfo, testdemoEntity entity, out string statusCode, out string statusMessage) 新增
		/// <summary>
		/// 新增
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="entity">实体</param>
		/// <param name="statusCode">返回状态码</param>
		/// <param name="statusMessage">返回状态消息</param>
		/// <returns>主鍵</returns>
		public string Add(UserInfo userInfo, testdemoEntity entity, out string statusCode, out string statusMessage)
		{
			var returnValue = string.Empty;
            string returnCode = string.Empty;
            string returnMessage = string.Empty;
            var parameter = ParameterUtil.CreateWithMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName, "新增实体");

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                var manager = new testdemoManager(dbProvider, userInfo);
                returnValue = manager.Add(entity);
				// returnValue = manager.Add(entity, out returnCode);
                returnMessage = manager.GetStateMessage(returnCode);
            });
            statusCode = returnCode;
            statusMessage = returnMessage;
            return returnValue;
		}
		#endregion

		#region public int Update(UserInfo userInfo, testdemoEntity entity, out string statusCode, out string statusMessage) 更新
		/// <summary>
		/// 更新
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="entity">实体</param>
		/// <param name="statusCode">返回状态码</param>
		/// <param name="statusMessage">返回状态信息</param>
		/// <returns>影响行数</returns>
		public int Update(UserInfo userInfo, testdemoEntity entity, out string statusCode, out string statusMessage)
		{
			int returnValue = 0;
            string returnCode = string.Empty;
            string returnMessage = string.Empty;
            var parameter = ParameterUtil.CreateWithMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName, "更新实体");

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                var manager = new testdemoManager(dbProvider, userInfo);
                returnValue = manager.UpdateEntity(entity);
				// returnValue = manager.Update(entity, out returnCode);
                returnMessage = manager.GetStateMessage(returnCode);
            });
            statusCode = returnCode;
            statusMessage = returnMessage;
            return returnValue;
		}
		#endregion

		#region public DataTable GetDT(UserInfo userInfo) 获取列表
		/// <summary>
		/// 获取列表
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <returns>数据表</returns>
		public DataTable GetDT(UserInfo userInfo)
		{
			var dataTable = new DataTable(testdemoTable.TableName);
            var parameter = ParameterUtil.CreateWithOutMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName);

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                dataTable = new testdemoManager(dbProvider, userInfo).GetDT(testdemoTable.FieldDeleteMark, 0, testdemoTable.FieldSortCode);
                dataTable.TableName = testdemoTable.TableName;
            });
            return dataTable;
		}
		#endregion

		#region public DataTable GetDTByPage(UserInfo userInfo, string searchValue, out int recordCount, int pageIndex = 1, int pageSize = 20, string sortExpression = null) 分页获取列表
		/// <summary>
		/// 分页获取列表
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="searchValue">查询关键字</param>
		/// <param name="recordCount">记录数</param>
		/// <param name="pageIndex">当前页</param>
		/// <param name="pageSize">每页显示记录条数</param>
		/// <param name="sortExpression">排序字段</param>
		/// <returns>数据表</returns>
		public DataTable GetDTByPage(UserInfo userInfo, string searchValue, out int recordCount, int pageIndex = 1, int pageSize = 20, string sortExpression = null)
		{
			var dataTable = new DataTable(testdemoTable.TableName);
            var returnRecordCount = 0;
            var parameter = ParameterUtil.CreateWithOutMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName);

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                var manager = new testdemoManager(dbProvider, userInfo);
                dataTable = manager.GetDTByPage(out returnRecordCount, pageIndex, pageSize, searchValue, sortExpression);
                dataTable.TableName = testdemoTable.TableName;
            });
            recordCount = returnRecordCount;
            return dataTable;
		}
		#endregion

		#region public List<testdemoEntity> GetListByPage(UserInfo userInfo, string searchValue, out int recordCount, int pageIndex = 1, int pageSize = 20, string sortExpression = null) 分页获取列表
        /// <summary>
        /// 分页获取列表
        /// </summary>
        /// <param name="userInfo">用户</param>
        /// <param name="searchValue">查询关键字</param>
        /// <param name="recordCount">记录数</param>
        /// <param name="pageIndex">当前页</param>
        /// <param name="pageSize">每页显示记录条数</param>
        /// <param name="sortExpression">排序字段</param>
        /// <returns>数据表</returns>
        public List<testdemoEntity> GetListByPage(UserInfo userInfo, string searchValue, out int recordCount, int pageIndex = 1, int pageSize = 20, string sortExpression = null)
        {
            List<testdemoEntity> list = new List<testdemoEntity>();
            var returnRecordCount = 0;
            var parameter = ParameterUtil.CreateWithOutMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName);

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                var manager = new testdemoManager(dbProvider, userInfo);
                var dataTable = manager.GetDTByPage(out returnRecordCount, pageIndex, pageSize, searchValue, sortExpression);
                list = BaseEntity.GetList<testdemoEntity>(dataTable);
            });
            recordCount = returnRecordCount;
            return list;
        }
        #endregion

		#region public testdemoEntity GetEntity(UserInfo userInfo, string id) 获取实体
		/// <summary>
		/// 得到实体
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="id">主鍵</param>
		/// <returns>实体</returns>
		public testdemoEntity GetEntity(UserInfo userInfo, string id)
		{
            testdemoEntity entity = null;
            var parameter = ParameterUtil.CreateWithOutMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName);

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                entity = new testdemoManager(dbProvider, userInfo).GetEntity(id);
            });
            return entity;
		}
		#endregion

		#region public DataTable GetDTByIds(UserInfo userInfo, string[] ids) 根据主键数组获取数据
		/// <summary>
		/// 根据主键数组获取数据
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="ids">主鍵</param>
		/// <returns>数据表</returns>
		public DataTable GetDTByIds(UserInfo userInfo, string[] ids)
		{
            var dataTable = new DataTable(testdemoTable.TableName);
            var parameter = ParameterUtil.CreateWithOutMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName);

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                dataTable = new testdemoManager(dbProvider, userInfo).GetDT(testdemoTable.FieldId, ids, testdemoTable.FieldSortCode);
                dataTable.TableName = testdemoTable.TableName;
            });

            return dataTable;
		}
		#endregion
		
		#region public DataTable GetDTByValues(UserInfo userInfo, List<KeyValuePair<string, object>> parameters) 根据条件获取数据
		/// <summary>
		/// 根据条件获取数据
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="parameters">参数</param>
		/// <returns>数据表</returns>
		public DataTable GetDTByValues(UserInfo userInfo, List<KeyValuePair<string, object>> parameters)
		{
			var dataTable = new DataTable(testdemoTable.TableName);
            var parameter = ParameterUtil.CreateWithOutMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName);

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                dataTable = new testdemoManager(dbProvider, userInfo).GetDT(parameters);
                dataTable.TableName = testdemoTable.TableName;
            });
            return dataTable;
		}
		#endregion
		
		#region public int BatchSave(UserInfo userInfo, List<testdemoEntity> entites) 批量保存数据
		/// <summary>
		/// 批量保存数据
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="entites">实体列表</param>
		/// <returns>影响行数</returns>
		public int BatchSave(UserInfo userInfo, List<testdemoEntity> entites)
		{
			var returnValue = 0;
            var parameter = ParameterUtil.CreateWithMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName, "批量保存数据");

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                returnValue += entites.Sum(entity => new testdemoManager(dbProvider, userInfo).Update(entity));
            });

            return returnValue;
		}
		#endregion
		
		#region public int Delete(UserInfo userInfo, string id) 删除指定数据
		/// <summary>
		/// 删除指定数据
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="id">主鍵</param>
		/// <returns>数据表</returns>
		public int Delete(UserInfo userInfo, string id)
		{
			var returnValue = 0;
            var parameter = ParameterUtil.CreateWithMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName, "删除指定数据", "主键：" + id);

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                returnValue = new testdemoManager(dbProvider, userInfo).Delete(id);
            });

            return returnValue;
		}
		#endregion

		#region public int BatchDelete(UserInfo userInfo, string[] ids) 批量删除数据
		/// <summary>
		/// 批量删除数据
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="ids">主键数组</param>
		/// <returns>影响行数</returns>
		public int BatchDelete(UserInfo userInfo, string[] ids)
		{
			var returnValue = 0;
            var parameter = ParameterUtil.CreateWithMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName, "批量删除数据");

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                returnValue = new testdemoManager(dbProvider, userInfo).Delete(ids);
            });
            return returnValue;
		}
		#endregion

		#region public int SetDeleted(UserInfo userInfo, string[] ids) 批量设置删除标志
		/// <summary>
		/// 批量设置删除标志
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="ids">主键数组</param>
		/// <returns>影响行数</returns>
		public int SetDeleted(UserInfo userInfo, string[] ids)
		{
			var returnValue = 0;
            var parameter = ParameterUtil.CreateWithMessage(userInfo, MethodBase.GetCurrentMethod(), this.serviceName, "批量设置删除标志");

            ServiceUtil.ProcessBusinessDb(userInfo, parameter, dbProvider =>
            {
                returnValue = new testdemoManager(dbProvider, userInfo).SetDeleted(ids);
            });

            return returnValue;
		}
		#endregion
	}
}
